#!/usr/bin/env python3
"""
Promote top crate candidates into exports/curated_overlays.json as suspect_crate_* names.

Inputs:
- exports/crate_system_candidates.csv (generated by find_crate_system_candidates.py)
- exports/curated_overlays.json (will be updated in-place)

Outputs:
- Updated curated_overlays.json with up to N suspect_crate_* additions for MAIN.EXE
"""
import csv
import json
from pathlib import Path

ROOT = Path(__file__).resolve().parents[1]
EXPORTS = ROOT / "exports"
CSV_IN = EXPORTS / "crate_system_candidates.csv"
CURATED = EXPORTS / "curated_overlays.json"

LIMIT = 8

ROLE_HINTS = [
    ("throw", "throw"),
    ("pickup", "pickup"),
    ("pick up", "pickup"),
    ("drop", "drop"),
    ("carry", "carry"),
    ("pad", "pad"),
    ("crate", "crate"),
]

def role_from_row(row: dict) -> str:
    pretty = (row.get('pretty') or '').lower()
    name = (row.get('name') or '').lower()
    text = pretty + ' ' + name
    for key, role in ROLE_HINTS:
        if key in text:
            return role
    # fallback by features
    try:
        distinct = int(row.get('distinct_masks') or 0)
        multi = int(row.get('multi_gate') or 0)
        pad_hits = int(row.get('pad_hits') or 0)
    except Exception:
        distinct = 0; multi = 0; pad_hits = 0
    if pad_hits > 0:
        return 'pad'
    if multi >= 1 and distinct >= 2:
        return 'pickup_or_throw'
    return 'crate_handler'


def main():
    if not CSV_IN.exists():
        print("No crate_system_candidates.csv found; run the scanner first")
        return
    rows = []
    with CSV_IN.open('r', encoding='utf-8', newline='') as f:
        rdr = csv.DictReader(f)
        for r in rdr:
            if r.get('bin') != 'MAIN.EXE':
                continue
            # basic parse
            try:
                score = int(r.get('score') or 0)
                dist = int(r.get('distance') or 0)
            except Exception:
                score = 0; dist = 99
            rows.append((score, -dist, r))
    rows.sort(key=lambda x: (x[0], x[1]), reverse=True)
    top = [r for (_s, _d, r) in rows[:LIMIT]]

    # Load curated
    curated = {}
    if CURATED.exists():
        try:
            curated = json.loads(CURATED.read_text(encoding='utf-8'))
        except Exception:
            curated = {}
    if not isinstance(curated, dict):
        curated = {}
    arr = curated.get('MAIN.EXE') or []
    by_name = {e.get('name'): e for e in arr if isinstance(e, dict) and e.get('name')}

    # Insert proposals
    for idx, r in enumerate(top, start=1):
        old = r.get('name') or ''
        if not old:
            continue
        existing = by_name.get(old)
        # Preserve curated, non-suspect names
        if existing and (existing.get('new_name') or '').startswith('suspect_') is False:
            continue
        role = role_from_row(r)
        new_name = f"suspect_crate_{role}_{idx:02d}"
        tags = set((existing or {}).get('tags') or []) | {'suspect','crate'}
        entry = dict(existing or {})
        entry.update({'name': old, 'new_name': new_name, 'tags': sorted(tags)})
        by_name[old] = entry

    curated['MAIN.EXE'] = list(by_name.values())
    CURATED.write_text(json.dumps(curated, indent=2), encoding='utf-8')
    print('Updated', CURATED)


if __name__ == '__main__':
    main()
