#!/usr/bin/env python3
"""
generate_tb_flags_header.py

Read exports/actor_flags_usage.json and generate datatypes/tb_flags.h with a
draft enum mapping for the most common single-bit masks used at actor+0x26.
"""
from __future__ import annotations

import json
from pathlib import Path

ROOT = Path(__file__).resolve().parents[1]
EXPORTS = ROOT / "exports"
FLAGS_JSON = EXPORTS / "actor_flags_usage.json"
OUT_H = ROOT / "datatypes" / "tb_flags.h"


def is_power_of_two(n: int) -> bool:
    return n > 0 and (n & (n - 1)) == 0


def main(limit: int = 16) -> None:
    if not FLAGS_JSON.exists():
        raise SystemExit(f"Missing {FLAGS_JSON}; run scripts/scan_actor_flags_usage.py first.")
    payload = json.loads(FLAGS_JSON.read_text(encoding="utf-8"))
    counts: dict[str, int] = payload.get("global_mask_counts", {})
    # filter to single-bit masks and normalize keys to int
    mask_counts: list[tuple[int, int]] = []
    for k, v in counts.items():
        try:
            m = int(k)
        except Exception:
            continue
        if is_power_of_two(m):
            mask_counts.append((m, int(v)))
    mask_counts.sort(key=lambda t: (-t[1], t[0]))
    top = mask_counts[:limit]

    guard = "TB_FLAGS_H"
    lines: list[str] = []
    lines.append("#ifndef %s" % guard)
    lines.append("#define %s" % guard)
    lines.append("")
    lines.append("// Auto-generated by scripts/generate_tb_flags_header.py")
    lines.append("// Source: exports/actor_flags_usage.json (global mask histogram)")
    lines.append("// NOTE: Draft values based on frequency of single-bit masks observed.")
    lines.append("")
    lines.append("typedef enum TbActorFlags {")
    if not top:
        lines.append("    TB_FLAG_NONE = 0, // no data yet")
    else:
        for i, (mask, cnt) in enumerate(top):
            bit = (mask.bit_length() - 1) if mask else -1
            lines.append(f"    TB_FLAG_BIT{i:02d} = 0x{mask:04X}, // hits={cnt}, bit={bit}")
    lines.append("} TbActorFlags;")
    lines.append("")
    if top:
        mask_or = " | ".join([f"TB_FLAG_BIT{i:02d}" for i in range(len(top))])
        lines.append(f"#define TB_FLAG_MASK_ALL ({mask_or})")
        lines.append("")
    lines.append("#endif // %s" % guard)
    OUT_H.parent.mkdir(parents=True, exist_ok=True)
    OUT_H.write_text("\n".join(lines), encoding="utf-8")
    print(f"Wrote {OUT_H}")


if __name__ == "__main__":
    main()
